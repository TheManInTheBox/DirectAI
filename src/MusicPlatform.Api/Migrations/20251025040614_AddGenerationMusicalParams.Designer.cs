// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicPlatform.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MusicPlatform.Api.Migrations
{
    [DbContext(typeof(MusicPlatformDbContext))]
    [Migration("20251025040614_AddGenerationMusicalParams")]
    partial class AddGenerationMusicalParams
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MusicPlatform.Domain.Entities.TrainedModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BaseModel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModelPath")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<long>("ModelSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("TrainingCompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TrainingConfig")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TrainingDatasetId")
                        .HasColumnType("uuid");

                    b.Property<string>("TrainingMetrics")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("TrainingStartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UsageCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("LastUsedAt");

                    b.HasIndex("Status");

                    b.HasIndex("TrainingDatasetId");

                    b.ToTable("TrainedModels");
                });

            modelBuilder.Entity("MusicPlatform.Domain.Entities.TrainingDataset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StemCount")
                        .HasColumnType("integer");

                    b.Property<float>("TotalDurationSeconds")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Status");

                    b.ToTable("TrainingDatasets");
                });

            modelBuilder.Entity("MusicPlatform.Domain.Entities.TrainingDatasetStem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("StemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrainingDatasetId")
                        .HasColumnType("uuid");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Order");

                    b.HasIndex("StemId");

                    b.HasIndex("TrainingDatasetId");

                    b.ToTable("TrainingDatasetStems");
                });

            modelBuilder.Entity("MusicPlatform.Domain.Entities.TrainingJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BaseModel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentEpoch")
                        .HasColumnType("integer");

                    b.Property<float?>("CurrentLoss")
                        .HasColumnType("real");

                    b.Property<float?>("DurationSeconds")
                        .HasColumnType("real");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Hyperparameters")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<float>("Progress")
                        .HasColumnType("real");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalEpochs")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TrainedModelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrainingDatasetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompletedAt");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("StartedAt");

                    b.HasIndex("Status");

                    b.HasIndex("TrainedModelId");

                    b.HasIndex("TrainingDatasetId");

                    b.ToTable("TrainingJobs");
                });

            modelBuilder.Entity("MusicPlatform.Domain.Models.AnalysisResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AnalyzedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("AudioFileId")
                        .HasColumnType("uuid");

                    b.Property<float>("Bpm")
                        .HasColumnType("real");

                    b.Property<string>("FlamingoInsightsJson")
                        .HasColumnType("text");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("MusicalKey")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<float>("Tuning")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AnalyzedAt");

                    b.HasIndex("AudioFileId")
                        .IsUnique();

                    b.ToTable("AnalysisResults");
                });

            modelBuilder.Entity("MusicPlatform.Domain.Models.AudioFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Album")
                        .HasColumnType("text");

                    b.Property<string>("AlbumArtist")
                        .HasColumnType("text");

                    b.Property<string>("AlbumArtworkUri")
                        .HasColumnType("text");

                    b.Property<string>("Artist")
                        .HasColumnType("text");

                    b.Property<string>("AudioMode")
                        .HasColumnType("text");

                    b.Property<int?>("Bitrate")
                        .HasColumnType("integer");

                    b.Property<string>("BlobUri")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<double?>("Bpm")
                        .HasColumnType("double precision");

                    b.Property<string>("BpmTag")
                        .HasColumnType("text");

                    b.Property<int?>("Channels")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("Composer")
                        .HasColumnType("text");

                    b.Property<string>("Conductor")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DiscNumber")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Genre")
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("KeyTag")
                        .HasColumnType("text");

                    b.Property<string>("Mp3Version")
                        .HasColumnType("text");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("SampleRate")
                        .HasColumnType("integer");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TimeSignature")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("TrackNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("Year")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("UploadedAt");

                    b.ToTable("AudioFiles");
                });

            modelBuilder.Entity("MusicPlatform.Domain.Models.GeneratedStem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BitDepth")
                        .HasColumnType("integer");

                    b.Property<string>("BlobUri")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("Channels")
                        .HasColumnType("integer");

                    b.Property<float>("DurationSeconds")
                        .HasColumnType("real");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GenerationRequestId")
                        .HasColumnType("uuid");

                    b.Property<int>("SampleRate")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GeneratedAt");

                    b.HasIndex("GenerationRequestId")
                        .IsUnique();

                    b.ToTable("GeneratedStems");
                });

            modelBuilder.Entity("MusicPlatform.Domain.Models.GenerationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AudioFileId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int[]>("TargetStems")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.HasIndex("AudioFileId");

                    b.HasIndex("RequestedAt");

                    b.HasIndex("Status");

                    b.ToTable("GenerationRequests");
                });

            modelBuilder.Entity("MusicPlatform.Domain.Models.JAMSAnnotation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AudioFileId")
                        .HasColumnType("uuid");

                    b.Property<string>("BlobUri")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JamsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AudioFileId");

                    b.HasIndex("CreatedAt");

                    b.ToTable("JAMSAnnotations");
                });

            modelBuilder.Entity("MusicPlatform.Domain.Models.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Checkpoints")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrentStep")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<string>("IdempotencyKey")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("LastHeartbeat")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxRetries")
                        .HasColumnType("integer");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrchestrationInstanceId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkerInstanceId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("IdempotencyKey")
                        .IsUnique();

                    b.HasIndex("LastHeartbeat");

                    b.HasIndex("StartedAt");

                    b.HasIndex("Status");

                    b.HasIndex("WorkerInstanceId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("MusicPlatform.Domain.Models.Stem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AnalysisErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AnalysisStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("AnalyzedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("AudioFileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AudioFileId1")
                        .HasColumnType("uuid");

                    b.Property<string>("Beats")
                        .HasColumnType("text");

                    b.Property<string>("BlobUri")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<double?>("Bpm")
                        .HasColumnType("double precision");

                    b.Property<string>("ChordProgression")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<float>("DurationSeconds")
                        .HasColumnType("real");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("FlamingoInsightsJson")
                        .HasColumnType("text");

                    b.Property<string>("JamsUri")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Key")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("NotationData")
                        .HasColumnType("text");

                    b.Property<double?>("PeakLevel")
                        .HasColumnType("double precision");

                    b.Property<double?>("RmsLevel")
                        .HasColumnType("double precision");

                    b.Property<string>("Sections")
                        .HasColumnType("text");

                    b.Property<DateTime>("SeparatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SourceSeparationModel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double?>("SpectralCentroid")
                        .HasColumnType("double precision");

                    b.Property<string>("TimeSignature")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<double?>("TuningFrequency")
                        .HasColumnType("double precision");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("ZeroCrossingRate")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisStatus");

                    b.HasIndex("AudioFileId");

                    b.HasIndex("AudioFileId1");

                    b.HasIndex("Key");

                    b.HasIndex("SeparatedAt");

                    b.HasIndex("Type");

                    b.ToTable("Stems");
                });

            modelBuilder.Entity("MusicPlatform.Domain.Entities.TrainedModel", b =>
                {
                    b.HasOne("MusicPlatform.Domain.Entities.TrainingDataset", "TrainingDataset")
                        .WithMany("TrainedModels")
                        .HasForeignKey("TrainingDatasetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingDataset");
                });

            modelBuilder.Entity("MusicPlatform.Domain.Entities.TrainingDatasetStem", b =>
                {
                    b.HasOne("MusicPlatform.Domain.Models.Stem", "Stem")
                        .WithMany()
                        .HasForeignKey("StemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MusicPlatform.Domain.Entities.TrainingDataset", "TrainingDataset")
                        .WithMany("Stems")
                        .HasForeignKey("TrainingDatasetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stem");

                    b.Navigation("TrainingDataset");
                });

            modelBuilder.Entity("MusicPlatform.Domain.Entities.TrainingJob", b =>
                {
                    b.HasOne("MusicPlatform.Domain.Entities.TrainedModel", "TrainedModel")
                        .WithMany()
                        .HasForeignKey("TrainedModelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MusicPlatform.Domain.Entities.TrainingDataset", "TrainingDataset")
                        .WithMany()
                        .HasForeignKey("TrainingDatasetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainedModel");

                    b.Navigation("TrainingDataset");
                });

            modelBuilder.Entity("MusicPlatform.Domain.Models.AnalysisResult", b =>
                {
                    b.HasOne("MusicPlatform.Domain.Models.AudioFile", null)
                        .WithOne()
                        .HasForeignKey("MusicPlatform.Domain.Models.AnalysisResult", "AudioFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("MusicPlatform.Domain.Models.BeatAnnotation", "Beats", b1 =>
                        {
                            b1.Property<Guid>("AnalysisResultId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<bool>("IsDownbeat")
                                .HasColumnType("boolean");

                            b1.Property<int>("Position")
                                .HasColumnType("integer");

                            b1.Property<float>("Time")
                                .HasColumnType("real");

                            b1.HasKey("AnalysisResultId", "Id");

                            b1.ToTable("BeatAnnotation");

                            b1.WithOwner()
                                .HasForeignKey("AnalysisResultId");
                        });

                    b.OwnsMany("MusicPlatform.Domain.Models.ChordAnnotation", "Chords", b1 =>
                        {
                            b1.Property<Guid>("AnalysisResultId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Chord")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<float>("Confidence")
                                .HasColumnType("real");

                            b1.Property<float>("EndTime")
                                .HasColumnType("real");

                            b1.Property<float>("StartTime")
                                .HasColumnType("real");

                            b1.HasKey("AnalysisResultId", "Id");

                            b1.ToTable("ChordAnnotation");

                            b1.WithOwner()
                                .HasForeignKey("AnalysisResultId");
                        });

                    b.OwnsMany("MusicPlatform.Domain.Models.Section", "Sections", b1 =>
                        {
                            b1.Property<Guid>("AnalysisResultId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<float>("Confidence")
                                .HasColumnType("real");

                            b1.Property<float>("EndTime")
                                .HasColumnType("real");

                            b1.Property<string>("Label")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<float>("StartTime")
                                .HasColumnType("real");

                            b1.HasKey("AnalysisResultId", "Id");

                            b1.ToTable("Section");

                            b1.WithOwner()
                                .HasForeignKey("AnalysisResultId");
                        });

                    b.Navigation("Beats");

                    b.Navigation("Chords");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("MusicPlatform.Domain.Models.GeneratedStem", b =>
                {
                    b.HasOne("MusicPlatform.Domain.Models.GenerationRequest", null)
                        .WithOne()
                        .HasForeignKey("MusicPlatform.Domain.Models.GeneratedStem", "GenerationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MusicPlatform.Domain.Models.GenerationMetadata", "Metadata", b1 =>
                        {
                            b1.Property<Guid>("GeneratedStemId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Conditioning")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<float>("InferenceTimeSeconds")
                                .HasColumnType("real");

                            b1.Property<string>("ModelName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("ModelVersion")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<int?>("RandomSeed")
                                .HasColumnType("integer");

                            b1.HasKey("GeneratedStemId");

                            b1.ToTable("GeneratedStems");

                            b1.WithOwner()
                                .HasForeignKey("GeneratedStemId");
                        });

                    b.Navigation("Metadata")
                        .IsRequired();
                });

            modelBuilder.Entity("MusicPlatform.Domain.Models.GenerationRequest", b =>
                {
                    b.HasOne("MusicPlatform.Domain.Models.AudioFile", null)
                        .WithMany()
                        .HasForeignKey("AudioFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MusicPlatform.Domain.Models.GenerationParameters", "Parameters", b1 =>
                        {
                            b1.Property<Guid>("GenerationRequestId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Bars")
                                .HasColumnType("integer");

                            b1.Property<List<string>>("ChordProgression")
                                .HasColumnType("text[]");

                            b1.Property<float>("DurationSeconds")
                                .HasColumnType("real");

                            b1.Property<string>("Key")
                                .HasColumnType("text");

                            b1.Property<string>("Prompt")
                                .HasColumnType("text");

                            b1.Property<int?>("RandomSeed")
                                .HasColumnType("integer");

                            b1.Property<string>("Scale")
                                .HasColumnType("text");

                            b1.Property<string>("SectionType")
                                .HasColumnType("text");

                            b1.Property<string>("Style")
                                .HasColumnType("text");

                            b1.Property<float?>("TargetBpm")
                                .HasColumnType("real");

                            b1.Property<float>("Temperature")
                                .HasColumnType("real");

                            b1.Property<string>("TimeSignature")
                                .HasColumnType("text");

                            b1.HasKey("GenerationRequestId");

                            b1.ToTable("GenerationRequests");

                            b1.WithOwner()
                                .HasForeignKey("GenerationRequestId");
                        });

                    b.Navigation("Parameters")
                        .IsRequired();
                });

            modelBuilder.Entity("MusicPlatform.Domain.Models.JAMSAnnotation", b =>
                {
                    b.HasOne("MusicPlatform.Domain.Models.AudioFile", null)
                        .WithMany()
                        .HasForeignKey("AudioFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicPlatform.Domain.Models.Stem", b =>
                {
                    b.HasOne("MusicPlatform.Domain.Models.AudioFile", null)
                        .WithMany()
                        .HasForeignKey("AudioFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicPlatform.Domain.Models.AudioFile", "AudioFile")
                        .WithMany()
                        .HasForeignKey("AudioFileId1");

                    b.Navigation("AudioFile");
                });

            modelBuilder.Entity("MusicPlatform.Domain.Entities.TrainingDataset", b =>
                {
                    b.Navigation("Stems");

                    b.Navigation("TrainedModels");
                });
#pragma warning restore 612, 618
        }
    }
}
